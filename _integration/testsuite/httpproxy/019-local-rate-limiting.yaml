# Copyright Project Contour Authors
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License.  You may obtain
# a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
# License for the specific language governing permissions and limitations
# under the License.

# This check depends on the `--watch=endpoints` argument being given
# to integration-tester.

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: ingress-conformance-echo
$apply:
  fixture:
    as: echo

---

apiVersion: v1
kind: Service
metadata:
  name: ingress-conformance-echo
$apply:
  fixture:
    as: echo

---

# This proxy has a local rate limit on the virtual host.
apiVersion: projectcontour.io/v1
kind: HTTPProxy
metadata:
  name: vhostratelimit
spec:
  virtualhost:
    fqdn: vhostratelimit.projectcontour.io
    rateLimitPolicy:
      local:
        requests: 1
        unit: hour
  routes:
  - services:
    - name: echo
      port: 80
---

# Wait for the service to have endpoints before trying to make
# a request.

import data.contour.resources

error_endpoints_not_ready[msg] {
  ep := resources.get("endpoints", "echo")
  
  not ep.subsets[0].addresses
  
  msg := "endpoints for svc/ingress-conformance-echo are not ready"
}

---

# Make a request against the proxy, confirm a 200 response
# is returned.

import data.contour.http.client
import data.contour.http.client.url
import data.contour.http.expect

Response := client.Get({
  "url": url.http("/"),
  "headers": {
    "Host": "vhostratelimit.projectcontour.io",
    "User-Agent": client.ua("local-rate-limit"),
  },
})

check_for_status_code [msg] {
  msg := expect.response_status_is(Response, 200)
}

---

# Make another request against the proxy, confirm a 429
# response is now gotten since we've exceeded the rate
# limit.

import data.contour.http.client
import data.contour.http.client.url
import data.contour.http.expect

Response := client.Get({
  "url": url.http("/"),
  "headers": {
    "Host": "vhostratelimit.projectcontour.io",
    "User-Agent": client.ua("local-rate-limit"),
  },
})

check_for_status_code [msg] {
  msg := expect.response_status_is(Response, 429)
}

---

# This proxy has a local rate limit on a route.
apiVersion: projectcontour.io/v1
kind: HTTPProxy
metadata:
  name: routeratelimit
spec:
  virtualhost:
    fqdn: routeratelimit.projectcontour.io
  routes:
  - services:
    - name: echo
      port: 80
    rateLimitPolicy:
      local:
        requests: 1
        unit: hour
  - conditions:
      - prefix: /unlimited
    services:
    - name: echo
      port: 80
---

# Make a request against the proxy, confirm a 200 response
# is returned.

import data.contour.http.client
import data.contour.http.client.url
import data.contour.http.expect

Response := client.Get({
  "url": url.http("/"),
  "headers": {
    "Host": "routeratelimit.projectcontour.io",
    "User-Agent": client.ua("local-rate-limit"),
  },
})

check_for_status_code [msg] {
  msg := expect.response_status_is(Response, 200)
}

---

# Make another request against the proxy, confirm a 429
# response is now gotten since we've exceeded the rate
# limit.

import data.contour.http.client
import data.contour.http.client.url
import data.contour.http.expect

Response := client.Get({
  "url": url.http("/"),
  "headers": {
    "Host": "routeratelimit.projectcontour.io",
    "User-Agent": client.ua("local-rate-limit"),
  },
})

check_for_status_code [msg] {
  msg := expect.response_status_is(Response, 429)
}

---

# Make a request against the route that doesn't have
# rate limiting to confirm we still get a 200 for that
# route.

import data.contour.http.client
import data.contour.http.client.url
import data.contour.http.expect

Response := client.Get({
  "url": url.http("/unlimited"),
  "headers": {
    "Host": "routeratelimit.projectcontour.io",
    "User-Agent": client.ua("local-rate-limit"),
  },
})

check_for_status_code [msg] {
  msg := expect.response_status_is(Response, 200)
}
